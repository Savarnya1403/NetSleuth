Network Device Discovery Script
Overview
This Python script scans the local network to discover active devices using both ARP requests and packet sniffing. It collects information such as IP addresses, MAC addresses, vendor names, and hostnames (if available), and displays the discovered devices in a user-friendly format.

The script uses the following tools:

Scapy: To send ARP requests and process network packets.
Pyshark: To capture network packets for sniffing.
MacVendorLookup: To retrieve the vendor names associated with MAC addresses.
Features
Sniffs packets on the specified network interface to discover devices.
Performs ARP scanning on the provided network prefix to confirm active devices.
Displays detailed information about each discovered device, including:
IP Address
MAC Address
Vendor (based on MAC address)
Hostname (via reverse DNS lookup)
Combines and displays results from both sniffing and ARP scanning.
Requirements
Python 3.x (tested with 3.6 and above)
Scapy: A powerful Python-based tool for network packet manipulation.
Pyshark: A Python wrapper for the Wireshark packet analyzer.
mac_vendor_lookup: A Python library for looking up vendors based on MAC addresses.
Installation
Install Python 3 (if not already installed).

Install the required dependencies by running the following command:

bash
Copy
Edit
pip install scapy pyshark mac-vendor-lookup
For Wireshark and Pyshark to work, you need to have Wireshark installed. On most Linux systems, you can install it using:
bash
Copy
Edit
sudo apt-get install wireshark
Make sure you have the necessary permissions to capture packets (you may need to run the script with sudo depending on your OS).

Usage
Step 1: Clone the Repository
Clone the repository to your local machine:

bash
Copy
Edit
git clone https://github.com/yourusername/Network-Device-Discovery.git
cd Network-Device-Discovery
Step 2: Run the Script
Run the script using Python. Make sure to replace eth0 and 192.168.1. with the appropriate network interface and IP prefix for your network.

bash
Copy
Edit
python3 device_discovery.py
The script will prompt you to enter:

Network Interface: The network interface you wish to use (e.g., eth0, Wi-Fi, wlan0).
Network Prefix: The first three octets of your local network IP range (e.g., 192.168.1. for a typical home network).
Example output after running the script:

lua
Copy
Edit
Enter the network interface name (e.g., eth0, Wi-Fi): wlan0
Enter the network prefix (e.g., 192.168.1.): 192.168.1.

Sniffing packets on wlan0 for 10 seconds...
Sniffed Devices:
IP             MAC               Hostname               Vendor
----------------------------------------------------------------------------
192.168.1.1    00:14:22:01:23:45 router.local           Cisco Systems
192.168.1.2    00:25:96:FF:00:AA laptop.local           Dell

Scanning 192.168.1.0/24 for active devices...
ARP Scan Results:
IP             MAC               Hostname               Vendor
----------------------------------------------------------------------------
192.168.1.3    00:22:33:44:55:66 device1.local         Apple
192.168.1.4    00:24:8C:1F:9F:99 device2.local         Samsung

Combined Device List:
IP             MAC               Hostname               Vendor
----------------------------------------------------------------------------
192.168.1.1    00:14:22:01:23:45 router.local           Cisco Systems
192.168.1.2    00:25:96:FF:00:AA laptop.local           Dell
192.168.1.3    00:22:33:44:55:66 device1.local         Apple
192.168.1.4    00:24:8C:1F:9F:99 device2.local         Samsung
Step 3: Interpret Results
Sniffed Devices: Displays devices detected through packet sniffing.
ARP Scan Results: Shows devices found via ARP scanning.
Combined Device List: Merges both results and displays all unique devices discovered.
Advanced Features
The script can be customized to extend sniffing time or change the ARP scan range.
It includes automatic vendor lookup for MAC addresses.
Reverse DNS lookups are used to get hostnames where possible.
Troubleshooting
Permission Issues: The script may require elevated privileges (e.g., sudo on Linux/macOS) to capture network packets. Ensure your user has appropriate permissions.

No Devices Found: Ensure the network interface is connected and operational. The ARP scan may not detect devices behind firewalls or those that donâ€™t respond to ARP requests.

Wireshark Errors: Ensure that Wireshark is correctly installed and that you can capture packets manually using Wireshark.

License
This script is licensed under the MIT License. See the LICENSE file for more details.